// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/convex_client.dart';
import 'api/simple.dart';
import 'api/subscription.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiConvexClientInitApp();
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1465306708;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'convex_dart',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiConvexClientConvexClientWrapperConnect({
    required ConvexClientWrapper that,
    required String deploymentUrl,
  });

  Future<ConvexValue> crateApiConvexClientConvexClientWrapperMutation({
    required ConvexClientWrapper that,
    required String functionName,
    required List<(String, ConvexValue)> args,
  });

  ConvexClientWrapper crateApiConvexClientConvexClientWrapperNew();

  Future<ConvexValue> crateApiConvexClientConvexClientWrapperQuery({
    required ConvexClientWrapper that,
    required String functionName,
    required List<(String, ConvexValue)> args,
  });

  Future<ConvexSubscription> crateApiConvexClientConvexClientWrapperSubscribe({
    required ConvexClientWrapper that,
    required String functionName,
    required List<(String, ConvexValue)> args,
  });

  void crateApiSubscriptionConvexSubscriptionClose({
    required ConvexSubscription that,
  });

  Future<ConvexValue?> crateApiSubscriptionConvexSubscriptionNext({
    required ConvexSubscription that,
  });

  ConvexValue crateApiConvexClientConvexValueFromBool({required bool value});

  ConvexValue crateApiConvexClientConvexValueFromDouble({
    required double value,
  });

  ConvexValue crateApiConvexClientConvexValueFromInt({
    required PlatformInt64 value,
  });

  ConvexValue crateApiConvexClientConvexValueFromString({
    required String value,
  });

  ConvexValue crateApiConvexClientConvexValueNullValue();

  Future<String> crateApiConvexClientConvexValueToJsonString({
    required ConvexValue that,
  });

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiConvexClientInitApp();

  Future<void> crateApiSimpleInitApp();

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ConvexClientWrapper;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ConvexClientWrapper;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ConvexClientWrapperPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ConvexSubscription;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ConvexSubscription;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ConvexSubscriptionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiConvexClientConvexClientWrapperConnect({
    required ConvexClientWrapper that,
    required String deploymentUrl,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
            that,
            serializer,
          );
          sse_encode_String(deploymentUrl, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_convex_error,
        ),
        constMeta: kCrateApiConvexClientConvexClientWrapperConnectConstMeta,
        argValues: [that, deploymentUrl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientConvexClientWrapperConnectConstMeta =>
      const TaskConstMeta(
        debugName: "ConvexClientWrapper_connect",
        argNames: ["that", "deploymentUrl"],
      );

  @override
  Future<ConvexValue> crateApiConvexClientConvexClientWrapperMutation({
    required ConvexClientWrapper that,
    required String functionName,
    required List<(String, ConvexValue)> args,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
            that,
            serializer,
          );
          sse_encode_String(functionName, serializer);
          sse_encode_list_record_string_convex_value(args, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_convex_value,
          decodeErrorData: sse_decode_convex_error,
        ),
        constMeta: kCrateApiConvexClientConvexClientWrapperMutationConstMeta,
        argValues: [that, functionName, args],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientConvexClientWrapperMutationConstMeta =>
      const TaskConstMeta(
        debugName: "ConvexClientWrapper_mutation",
        argNames: ["that", "functionName", "args"],
      );

  @override
  ConvexClientWrapper crateApiConvexClientConvexClientWrapperNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiConvexClientConvexClientWrapperNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientConvexClientWrapperNewConstMeta =>
      const TaskConstMeta(debugName: "ConvexClientWrapper_new", argNames: []);

  @override
  Future<ConvexValue> crateApiConvexClientConvexClientWrapperQuery({
    required ConvexClientWrapper that,
    required String functionName,
    required List<(String, ConvexValue)> args,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
            that,
            serializer,
          );
          sse_encode_String(functionName, serializer);
          sse_encode_list_record_string_convex_value(args, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_convex_value,
          decodeErrorData: sse_decode_convex_error,
        ),
        constMeta: kCrateApiConvexClientConvexClientWrapperQueryConstMeta,
        argValues: [that, functionName, args],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientConvexClientWrapperQueryConstMeta =>
      const TaskConstMeta(
        debugName: "ConvexClientWrapper_query",
        argNames: ["that", "functionName", "args"],
      );

  @override
  Future<ConvexSubscription> crateApiConvexClientConvexClientWrapperSubscribe({
    required ConvexClientWrapper that,
    required String functionName,
    required List<(String, ConvexValue)> args,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
            that,
            serializer,
          );
          sse_encode_String(functionName, serializer);
          sse_encode_list_record_string_convex_value(args, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription,
          decodeErrorData: sse_decode_convex_error,
        ),
        constMeta: kCrateApiConvexClientConvexClientWrapperSubscribeConstMeta,
        argValues: [that, functionName, args],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiConvexClientConvexClientWrapperSubscribeConstMeta =>
      const TaskConstMeta(
        debugName: "ConvexClientWrapper_subscribe",
        argNames: ["that", "functionName", "args"],
      );

  @override
  void crateApiSubscriptionConvexSubscriptionClose({
    required ConvexSubscription that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSubscriptionConvexSubscriptionCloseConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSubscriptionConvexSubscriptionCloseConstMeta =>
      const TaskConstMeta(
        debugName: "ConvexSubscription_close",
        argNames: ["that"],
      );

  @override
  Future<ConvexValue?> crateApiSubscriptionConvexSubscriptionNext({
    required ConvexSubscription that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_convex_value,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSubscriptionConvexSubscriptionNextConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSubscriptionConvexSubscriptionNextConstMeta =>
      const TaskConstMeta(
        debugName: "ConvexSubscription_next",
        argNames: ["that"],
      );

  @override
  ConvexValue crateApiConvexClientConvexValueFromBool({required bool value}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_bool(value, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_convex_value,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiConvexClientConvexValueFromBoolConstMeta,
        argValues: [value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientConvexValueFromBoolConstMeta =>
      const TaskConstMeta(
        debugName: "convex_value_from_bool",
        argNames: ["value"],
      );

  @override
  ConvexValue crateApiConvexClientConvexValueFromDouble({
    required double value,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_f_64(value, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_convex_value,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiConvexClientConvexValueFromDoubleConstMeta,
        argValues: [value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientConvexValueFromDoubleConstMeta =>
      const TaskConstMeta(
        debugName: "convex_value_from_double",
        argNames: ["value"],
      );

  @override
  ConvexValue crateApiConvexClientConvexValueFromInt({
    required PlatformInt64 value,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_64(value, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_convex_value,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiConvexClientConvexValueFromIntConstMeta,
        argValues: [value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientConvexValueFromIntConstMeta =>
      const TaskConstMeta(
        debugName: "convex_value_from_int",
        argNames: ["value"],
      );

  @override
  ConvexValue crateApiConvexClientConvexValueFromString({
    required String value,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(value, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_convex_value,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiConvexClientConvexValueFromStringConstMeta,
        argValues: [value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientConvexValueFromStringConstMeta =>
      const TaskConstMeta(
        debugName: "convex_value_from_string",
        argNames: ["value"],
      );

  @override
  ConvexValue crateApiConvexClientConvexValueNullValue() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_convex_value,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiConvexClientConvexValueNullValueConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientConvexValueNullValueConstMeta =>
      const TaskConstMeta(debugName: "convex_value_null_value", argNames: []);

  @override
  Future<String> crateApiConvexClientConvexValueToJsonString({
    required ConvexValue that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_convex_value(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiConvexClientConvexValueToJsonStringConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientConvexValueToJsonStringConstMeta =>
      const TaskConstMeta(
        debugName: "convex_value_to_json_string",
        argNames: ["that"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiConvexClientInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiConvexClientInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConvexClientInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ConvexClientWrapper => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ConvexClientWrapper => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ConvexSubscription => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ConvexSubscription => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription;

  @protected
  ConvexClientWrapper
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConvexClientWrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConvexSubscription
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConvexSubscriptionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConvexClientWrapper
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConvexClientWrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConvexSubscription
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConvexSubscriptionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, ConvexValue> dco_decode_Map_String_convex_value_None(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_convex_value(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  ConvexClientWrapper
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConvexClientWrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConvexSubscription
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConvexSubscriptionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ConvexValue dco_decode_box_autoadd_convex_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_convex_value(raw);
  }

  @protected
  ConvexError dco_decode_convex_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConvexError(message: dco_decode_String(arr[0]));
  }

  @protected
  ConvexValue dco_decode_convex_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ConvexValue_Null();
      case 1:
        return ConvexValue_String(dco_decode_String(raw[1]));
      case 2:
        return ConvexValue_Int64(dco_decode_i_64(raw[1]));
      case 3:
        return ConvexValue_Float64(dco_decode_f_64(raw[1]));
      case 4:
        return ConvexValue_Array(dco_decode_list_convex_value(raw[1]));
      case 5:
        return ConvexValue_Object(
          dco_decode_Map_String_convex_value_None(raw[1]),
        );
      case 6:
        return ConvexValue_Bytes(dco_decode_list_prim_u_8_strict(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<ConvexValue> dco_decode_list_convex_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_convex_value).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, ConvexValue)> dco_decode_list_record_string_convex_value(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_convex_value)
        .toList();
  }

  @protected
  ConvexValue? dco_decode_opt_box_autoadd_convex_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_convex_value(raw);
  }

  @protected
  (String, ConvexValue) dco_decode_record_string_convex_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_convex_value(arr[1]));
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  ConvexClientWrapper
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConvexClientWrapperImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ConvexSubscription
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConvexSubscriptionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ConvexClientWrapper
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConvexClientWrapperImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ConvexSubscription
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConvexSubscriptionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Map<String, ConvexValue> sse_decode_Map_String_convex_value_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_convex_value(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ConvexClientWrapper
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConvexClientWrapperImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ConvexSubscription
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConvexSubscriptionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ConvexValue sse_decode_box_autoadd_convex_value(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_convex_value(deserializer));
  }

  @protected
  ConvexError sse_decode_convex_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return ConvexError(message: var_message);
  }

  @protected
  ConvexValue sse_decode_convex_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return ConvexValue_Null();
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return ConvexValue_String(var_field0);
      case 2:
        var var_field0 = sse_decode_i_64(deserializer);
        return ConvexValue_Int64(var_field0);
      case 3:
        var var_field0 = sse_decode_f_64(deserializer);
        return ConvexValue_Float64(var_field0);
      case 4:
        var var_field0 = sse_decode_list_convex_value(deserializer);
        return ConvexValue_Array(var_field0);
      case 5:
        var var_field0 = sse_decode_Map_String_convex_value_None(deserializer);
        return ConvexValue_Object(var_field0);
      case 6:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return ConvexValue_Bytes(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<ConvexValue> sse_decode_list_convex_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ConvexValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_convex_value(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, ConvexValue)> sse_decode_list_record_string_convex_value(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, ConvexValue)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_convex_value(deserializer));
    }
    return ans_;
  }

  @protected
  ConvexValue? sse_decode_opt_box_autoadd_convex_value(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_convex_value(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, ConvexValue) sse_decode_record_string_convex_value(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_convex_value(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
    ConvexClientWrapper self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConvexClientWrapperImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
    ConvexSubscription self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConvexSubscriptionImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
    ConvexClientWrapper self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConvexClientWrapperImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
    ConvexSubscription self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConvexSubscriptionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_convex_value_None(
    Map<String, ConvexValue> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_convex_value(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexClientWrapper(
    ConvexClientWrapper self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConvexClientWrapperImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvexSubscription(
    ConvexSubscription self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConvexSubscriptionImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_convex_value(
    ConvexValue self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_convex_value(self, serializer);
  }

  @protected
  void sse_encode_convex_error(ConvexError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_convex_value(ConvexValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ConvexValue_Null():
        sse_encode_i_32(0, serializer);
      case ConvexValue_String(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case ConvexValue_Int64(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_i_64(field0, serializer);
      case ConvexValue_Float64(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_f_64(field0, serializer);
      case ConvexValue_Array(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_convex_value(field0, serializer);
      case ConvexValue_Object(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_Map_String_convex_value_None(field0, serializer);
      case ConvexValue_Bytes(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
    }
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_convex_value(
    List<ConvexValue> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_convex_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_convex_value(
    List<(String, ConvexValue)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_convex_value(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_convex_value(
    ConvexValue? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_convex_value(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_convex_value(
    (String, ConvexValue) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_convex_value(self.$2, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class ConvexClientWrapperImpl extends RustOpaque
    implements ConvexClientWrapper {
  // Not to be used by end users
  ConvexClientWrapperImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConvexClientWrapperImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_ConvexClientWrapper,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ConvexClientWrapper,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ConvexClientWrapperPtr,
  );

  Future<void> connect({required String deploymentUrl}) =>
      RustLib.instance.api.crateApiConvexClientConvexClientWrapperConnect(
        that: this,
        deploymentUrl: deploymentUrl,
      );

  Future<ConvexValue> mutation({
    required String functionName,
    required List<(String, ConvexValue)> args,
  }) => RustLib.instance.api.crateApiConvexClientConvexClientWrapperMutation(
    that: this,
    functionName: functionName,
    args: args,
  );

  Future<ConvexValue> query({
    required String functionName,
    required List<(String, ConvexValue)> args,
  }) => RustLib.instance.api.crateApiConvexClientConvexClientWrapperQuery(
    that: this,
    functionName: functionName,
    args: args,
  );

  Future<ConvexSubscription> subscribe({
    required String functionName,
    required List<(String, ConvexValue)> args,
  }) => RustLib.instance.api.crateApiConvexClientConvexClientWrapperSubscribe(
    that: this,
    functionName: functionName,
    args: args,
  );
}

@sealed
class ConvexSubscriptionImpl extends RustOpaque implements ConvexSubscription {
  // Not to be used by end users
  ConvexSubscriptionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConvexSubscriptionImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ConvexSubscription,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConvexSubscription,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ConvexSubscriptionPtr,
  );

  void close() => RustLib.instance.api
      .crateApiSubscriptionConvexSubscriptionClose(that: this);

  Future<ConvexValue?> next() => RustLib.instance.api
      .crateApiSubscriptionConvexSubscriptionNext(that: this);
}
