// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'subscription.dart';

// These functions are ignored because they are not marked as `pub`: `convex_value_to_json`, `convex_value_to_serde_json`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvexClientWrapper>>
abstract class ConvexClientWrapper implements RustOpaqueInterface {
  Future<void> connect({required String deploymentUrl});

  Future<ConvexValue> mutation({
    required String functionName,
    required List<(String, ConvexValue)> args,
  });

  factory ConvexClientWrapper() =>
      RustLib.instance.api.crateApiConvexClientConvexClientWrapperNew();

  Future<ConvexValue> query({
    required String functionName,
    required List<(String, ConvexValue)> args,
  });

  Future<ConvexSubscription> subscribe({
    required String functionName,
    required List<(String, ConvexValue)> args,
  });
}

class ConvexError implements FrbException {
  final String message;

  const ConvexError({required this.message});

  @override
  int get hashCode => message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConvexError &&
          runtimeType == other.runtimeType &&
          message == other.message;
}

class ConvexValue {
  final String inner;

  const ConvexValue({required this.inner});

  static ConvexValue fromBool({required bool value}) => RustLib.instance.api
      .crateApiConvexClientConvexValueFromBool(value: value);

  static ConvexValue fromDouble({required double value}) => RustLib.instance.api
      .crateApiConvexClientConvexValueFromDouble(value: value);

  static ConvexValue fromInt({required PlatformInt64 value}) =>
      RustLib.instance.api.crateApiConvexClientConvexValueFromInt(value: value);

  static ConvexValue fromString({required String value}) => RustLib.instance.api
      .crateApiConvexClientConvexValueFromString(value: value);

  static ConvexValue null_() =>
      RustLib.instance.api.crateApiConvexClientConvexValueNull();

  @override
  int get hashCode => inner.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConvexValue &&
          runtimeType == other.runtimeType &&
          inner == other.inner;
}
